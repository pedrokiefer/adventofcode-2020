package main

import (
	"bytes"
	"io/ioutil"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCanLoadInitialMap(t *testing.T) {
	input := ioutil.NopCloser(bytes.NewReader([]byte(`Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...`)))

	im := NewImage()
	im.LoadTiles(input)
	im.FindCornerTiles()

	assert.Equal(t, [][]string{
		{".", ".", "#", "#", ".", "#", ".", ".", "#", "."},
		{".", ".", ".", "#", ".", "#", "#", ".", ".", "#"},
		{".", ".", "#", "#", "#", ".", ".", "#", "#", "#"},
		{".", "#", "#", "#", "#", "#", ".", ".", "#", "."},
	}, im.Tiles[0].Edges)

	assert.Equal(t, []int{1951, 1171, 2971, 3079}, func() []int {
		r := []int{}
		for _, t := range im.Corners {
			r = append(r, t.ID)
		}
		return r
	}())

	im.Print()

	assert.Equal(t, 20899048083288, im.MultiplyCorners())
}
